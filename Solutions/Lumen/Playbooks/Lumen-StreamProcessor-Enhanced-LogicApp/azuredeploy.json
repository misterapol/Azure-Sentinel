{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",    "parameters": {
        "PlaybookName": {
            "defaultValue": "Lumen-StreamProcessor-Enhanced-LogicApp",
            "type": "string"
        },
        "LumenAPIBaseURL": {
            "defaultValue": "https://3xjeevrwij.execute-api.us-east-1.amazonaws.com/4364-develop-poc-for-microsoft-sentinel-integration-with-bll",
            "type": "string"
        },
        "LumenAPIKey": {
            "type": "securestring",
            "metadata": {
                "description": "Lumen API key for accessing threat intelligence endpoints"
            }
        },
        "WorkspaceID": {
            "type": "string",
            "metadata": {
                "description": "Microsoft Sentinel workspace ID"
            }
        },
        "ChunkSize": {
            "defaultValue": 100,
            "type": "int",
            "metadata": {
                "description": "Number of indicators per chunk (max 100 for Sentinel API)"
            }
        },
        "ProcessingDelaySeconds": {
            "defaultValue": 65,
            "type": "int",
            "metadata": {
                "description": "Delay between API calls to respect rate limits (90 per minute = ~65 seconds)"
            }
        }
    },
    "variables": {
        "SentinelConnectionName": "[concat('sentinel-', parameters('PlaybookName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('SentinelConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('SentinelConnectionName')]",
                "customParameterValues": {},
                "parameterValueType": "Alternative",
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]"
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('SentinelConnectionName'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "LumenAPIBaseURL": {
                            "type": "String",
                            "defaultValue": "[parameters('LumenAPIBaseURL')]"
                        },
                        "LumenAPIKey": {
                            "type": "SecureString",
                            "defaultValue": "[parameters('LumenAPIKey')]"
                        },
                        "WorkspaceID": {
                            "type": "String",
                            "defaultValue": "[parameters('WorkspaceID')]"
                        },
                        "ChunkSize": {
                            "type": "Int",
                            "defaultValue": "[parameters('ChunkSize')]"
                        },
                        "ProcessingDelaySeconds": {
                            "type": "Int",
                            "defaultValue": "[parameters('ProcessingDelaySeconds')]"
                        }
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "frequency": "Hour",
                                "interval": 6
                            },
                            "type": "Recurrence"
                        }
                    },
                    "actions": {                        "Initialize_Variables": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "ProcessingStartTime",
                                        "type": "string",
                                        "value": "@utcNow()"
                                    },
                                    {
                                        "name": "TotalIndicators",
                                        "type": "integer",
                                        "value": 0
                                    },
                                    {
                                        "name": "ProcessedChunks",
                                        "type": "integer",
                                        "value": 0
                                    },
                                    {
                                        "name": "FailedChunks",
                                        "type": "integer",
                                        "value": 0
                                    },
                                    {
                                        "name": "CurrentChunk",
                                        "type": "array",
                                        "value": []
                                    },
                                    {
                                        "name": "ChunkCounter",
                                        "type": "integer",
                                        "value": 0
                                    },
                                    {
                                        "name": "JsonBuffer",
                                        "type": "string",
                                        "value": ""
                                    },
                                    {
                                        "name": "IntermediateBuffer",
                                        "type": "string",
                                        "value": ""
                                    }
                                ]
                            }
                        },
                        "Initialize_FileProcessingVariables": {
                            "runAfter": {
                                "Initialize_Variables": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "BatchSize",
                                        "type": "integer",
                                        "value": 5000
                                    },
                                    {
                                        "name": "BatchStartIndex",
                                        "type": "integer",
                                        "value": 0
                                    },
                                    {
                                        "name": "ProcessedBatches",
                                        "type": "integer",
                                        "value": 0
                                    },
                                    {
                                        "name": "AllIndicators",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            }
                        },
                        "Initialize_DummyVar": {
                            "runAfter": {
                                "Initialize_FileProcessingVariables": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "DummyVar",
                                        "type": "string",
                                        "value": "dummy"
                                    }
                                ]
                            }
                        },
                        "Set_ChunkSize": {
                            "runAfter": {
                                "Initialize_DummyVar": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "ChunkSizeBytes",
                                        "type": "integer",
                                        "value": 5242880
                                    }
                                ]
                            }
                        },
                        "Calculate_Initial_RangeStart": {
                            "runAfter": {
                                "Set_ChunkSize": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "RangeStart",
                                        "type": "integer",
                                        "value": 0
                                    }
                                ]
                            }
                        },
                        "Calculate_Initial_RangeEnd": {
                            "runAfter": {
                                "Calculate_Initial_RangeStart": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "RangeEnd",
                                        "type": "integer",
                                        "value": "@sub(variables('ChunkSizeBytes'), 1)"
                                    }
                                ]
                            }
                        },
                        "Step1_GetFileMetadata": {
                            "runAfter": {
                                "Calculate_Initial_RangeEnd": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Http",
                            "inputs": {
                                "method": "POST",
                                "uri": "@{parameters('LumenAPIBaseURL')}/reputation-query-temp-microsoft-sentinel",
                                "headers": {
                                    "x-api-key": "@parameters('LumenAPIKey')",
                                    "Content-Type": "application/json"
                                },
                                "body": "\"HEAD\""
                            }
                        },
                        "Log_FileMetadata": {
                            "runAfter": {
                                "Step1_GetFileMetadata": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": {
                                "content_type": "@body('Step1_GetFileMetadata')?['ContentType']",
                                "content_length": "@body('Step1_GetFileMetadata')?['ContentLength']",
                                "last_modified": "@body('Step1_GetFileMetadata')?['LastModified']",
                                "estimated_chunks_needed": "@div(int(body('Step1_GetFileMetadata')?['ContentLength']), 5242880)"
                            }
                        },
                        "Step2_GetPresignedURL": {
                            "runAfter": {
                                "Log_FileMetadata": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Http",
                            "inputs": {
                                "method": "POST",
                                "uri": "@{parameters('LumenAPIBaseURL')}/reputation-query-temp-microsoft-sentinel",
                                "headers": {
                                    "x-api-key": "@parameters('LumenAPIKey')",
                                    "Content-Type": "application/json"
                                }
                            }
                        },
                        "Step3_ValidatePresignedURL": {
                            "runAfter": {
                                "Step2_GetPresignedURL": [
                                    "Succeeded"
                                ]
                            },
                            "type": "If",
                            "expression": {
                                "and": [
                                    {
                                        "not": {
                                            "equals": [
                                                "@body('Step2_GetPresignedURL')?['url']",
                                                null
                                            ]
                                        }
                                    },
                                    {
                                        "not": {
                                            "equals": [
                                                "@body('Step2_GetPresignedURL')?['url']",
                                                ""
                                            ]
                                        }
                                    }
                                ]
                            },
                            "actions": {
                                "Step4_FetchIndicatorBatches": {
                                    "runAfter": {},
                                    "type": "Until",
                                    "expression": "@equals(variables('ProcessedBatches'), -1)",
                                    "limit": {
                                        "count": 1000,
                                        "timeout": "PT8H"
                                    },
                                    "actions": {
                                        "Step4_GetIndicatorBatch": {
                                            "runAfter": {},
                                            "type": "Http",
                                            "inputs": {
                                                "method": "GET",
                                                "uri": "@body('Step2_GetPresignedURL')['url']",
                                                "headers": {
                                                    "Accept": "application/json",
                                                    "Range": "bytes=@{variables('RangeStart')}-@{variables('RangeEnd')}"
                                                }
                                            }
                                        },
                                        "LogRangeRequest": {
                                            "runAfter": {
                                                "Step4_GetIndicatorBatch": [
                                                    "Succeeded",
                                                    "Failed"
                                                ]
                                            },
                                            "type": "Compose",
                                            "inputs": {
                                                "range_request": "bytes=@{variables('RangeStart')}-@{variables('RangeEnd')}",
                                                "batch_index": "@variables('BatchStartIndex')",
                                                "status_code": "@outputs('Step4_GetIndicatorBatch').statusCode",
                                                "content_range": "@outputs('Step4_GetIndicatorBatch').headers['Content-Range']",
                                                "content_length": "@outputs('Step4_GetIndicatorBatch').headers['Content-Length']"
                                            }
                                        },
                                        "Step4_AppendToBuffer": {
                                            "runAfter": {
                                                "LogRangeRequest": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "If",
                                            "expression": {
                                                "or": [
                                                    {
                                                        "equals": [
                                                            "@outputs('Step4_GetIndicatorBatch').statusCode",
                                                            206
                                                        ]
                                                    },
                                                    {
                                                        "equals": [
                                                            "@outputs('Step4_GetIndicatorBatch').statusCode",
                                                            200
                                                        ]
                                                    }
                                                ]
                                            },                                            "actions": {
                                                "CreateBufferAppendValue": {
                                                    "runAfter": {},
                                                    "type": "Compose",
                                                    "inputs": "@concat(variables('JsonBuffer'), string(body('Step4_GetIndicatorBatch')))"
                                                },
                                                "AppendChunkToBuffer": {
                                                    "runAfter": {
                                                        "CreateBufferAppendValue": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "JsonBuffer",
                                                        "value": "@outputs('CreateBufferAppendValue')"
                                                    }
                                                }
                                            }
                                        },
                                        "Step4_CalculateNewRangeStart": {
                                            "runAfter": {
                                                "Step4_AppendToBuffer": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Compose",
                                            "inputs": "@add(variables('RangeStart'), variables('ChunkSizeBytes'))"
                                        },
                                        "Step4_UpdateRangeStart": {
                                            "runAfter": {
                                                "Step4_CalculateNewRangeStart": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "RangeStart",
                                                "value": "@outputs('Step4_CalculateNewRangeStart')"
                                            }
                                        },
                                        "Step4_CalculateNewRangeEnd": {
                                            "runAfter": {
                                                "Step4_UpdateRangeStart": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Compose",
                                            "inputs": "@sub(variables('RangeEnd'), variables('ChunkSizeBytes'))"
                                        },
                                        "Step4_UpdateRangeEnd": {
                                            "runAfter": {
                                                "Step4_CalculateNewRangeEnd": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "RangeEnd",
                                                "value": "@outputs('Step4_CalculateNewRangeEnd')"
                                            }
                                        },
                                        "Step4_CheckIfMoreData": {
                                            "runAfter": {
                                                "Step4_UpdateRangeEnd": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "If",
                                            "expression": {
                                                "less": [
                                                    "@variables('RangeEnd')",
                                                    0
                                                ]
                                            },
                                            "actions": {
                                                "Set_NoMoreData": {
                                                    "runAfter": {},
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "ProcessedBatches",
                                                        "value": -1
                                                    }
                                                }
                                            }
                                        },
                                        "Step4_CalculateNewProcessedBatches": {
                                            "runAfter": {
                                                "Step4_CheckIfMoreData": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Compose",
                                            "inputs": "@add(variables('ProcessedBatches'), 1)"
                                        },
                                        "Step4_Success": {
                                            "runAfter": {
                                                "Step4_CalculateNewProcessedBatches": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "ProcessedBatches",
                                                "value": "@outputs('Step4_CalculateNewProcessedBatches')"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "Step5_InitializeVariables": {
                            "runAfter": {
                                "Step3_ValidatePresignedURL": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "IndicatorBatch",
                                        "type": "array",
                                        "value": "@json(variables('JsonBuffer'))"
                                    },
                                    {
                                        "name": "ProcessedIndicatorCount",
                                        "type": "integer",
                                        "value": 0
                                    },
                                    {
                                        "name": "FailedIndicatorCount",
                                        "type": "integer",
                                        "value": 0
                                    }
                                ]
                            }
                        },
                        "Step5_InitUploadStatusCode": {
                            "runAfter": {
                                "Step5_InitializeVariables": ["Succeeded"]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "StixUploadStatusCode",
                                        "type": "integer",
                                        "value": null
                                    }
                                ]
                            }
                        },
                        "Step5_InitShouldRetry": {
                            "runAfter": {
                                "Step5_InitUploadStatusCode": ["Succeeded"]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "ShouldRetry",
                                        "type": "boolean",
                                        "value": false
                                    }
                                ]
                            }
                        },
                        "Step5_ProcessIndicators": {
                            "runAfter": {
                                "Step5_InitShouldRetry": ["Succeeded"]
                            },
                            "type": "Scope",
                            "actions": {
                                "Step5_BuildStixBundle": {
                                    "runAfter": {},
                                    "type": "Compose",
                                    "inputs": {
                                        "type": "bundle",
                                        "id": "@{concat('bundle--', guid(utcNow()))}",
                                        "objects": "@variables('IndicatorBatch')"
                                    }
                                },                                "Step5_UploadStixBundleToSentinel": {
                                    "runAfter": {
                                        "Step5_BuildStixBundle": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                        "method": "POST",
                                        "uri": "https://api.ti.sentinel.azure.com/workspaces/@{parameters('WorkspaceID')}/threat-intelligence-stix-objects:upload?api-version=2024-01-01-preview",
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "body": "@outputs('Step5_BuildStixBundle')",
                                        "authentication": {
                                            "type": "ManagedServiceIdentity"
                                        }
                                    }
                                },
                                "Step5_SetUploadStatusCode_Main": {
                                    "runAfter": {
                                        "Step5_UploadStixBundleToSentinel": ["Succeeded"]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "StixUploadStatusCode",
                                        "value": "@outputs('Step5_UploadStixBundleToSentinel').statusCode"
                                    }
                                },
                                "Step5_Check429": {
                                    "runAfter": {
                                        "Step5_UploadStixBundleToSentinel": [
                                            "Failed"
                                        ]
                                    },
                                    "type": "If",
                                    "expression": {
                                        "equals": [
                                            "@outputs('Step5_UploadStixBundleToSentinel').statusCode",
                                            429
                                        ]
                                    },
                                    "actions": {
                                        "Step5_ExtractRetryDelay": {
                                            "runAfter": {},
                                            "type": "Compose",
                                            "inputs": "@int(first(split(last(split(outputs('Step5_UploadStixBundleToSentinel').body.message, 'in ')), ' seconds')) )"
                                        },
                                        "Step5_Delay429": {
                                            "runAfter": {
                                                "Step5_ExtractRetryDelay": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Wait",
                                            "inputs": {
                                                "interval": {
                                                    "count": "@outputs('Step5_ExtractRetryDelay')",
                                                    "unit": "Second"
                                                }
                                            }
                                        },
                                        "Step5_SetShouldRetry": {
                                            "runAfter": {
                                                "Step5_Delay429": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "ShouldRetry",
                                                "value": true
                                            }
                                        }
                                    }
                                },
                                "Step5_IfShouldRetry": {
                                    "runAfter": {
                                        "Step5_Check429": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "If",
                                    "expression": {
                                        "equals": [
                                            "@variables('ShouldRetry')",
                                            true
                                        ]
                                    },
                                    "actions": {                                        "Step5_RetryUpload": {
                                            "runAfter": {},
                                            "type": "Http",
                                            "inputs": {
                                                "method": "POST",
                                                "uri": "https://api.ti.sentinel.azure.com/workspaces/@{parameters('WorkspaceID')}/threat-intelligence-stix-objects:upload?api-version=2024-01-01-preview",
                                                "headers": {
                                                    "Content-Type": "application/json"
                                                },
                                                "body": "@outputs('Step5_BuildStixBundle')",
                                                "authentication": {
                                                    "type": "ManagedServiceIdentity"
                                                }
                                            }
                                        }
                                    }
                                },
                                "Step5_SetUploadStatusCode_Retry": {
                                    "runAfter": {
                                        "Step5_IfShouldRetry": ["Succeeded"]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "StixUploadStatusCode",
                                        "value": "@coalesce(body('Step5_IfShouldRetry')?['Step5_RetryUpload']?['statusCode'], null)"
                                    }
                                },
                                "Step5_LogBatchResult": {
                                    "runAfter": {
                                        "Step5_SetUploadStatusCode_Main": ["Succeeded"],
                                        "Step5_SetUploadStatusCode_Retry": ["Succeeded"]
                                    },
                                    "type": "Compose",
                                    "inputs": {
                                        "processed_count": "@length(variables('IndicatorBatch'))",
                                        "upload_status": "@variables('StixUploadStatusCode')"
                                    }
                                }
                            }
                        },                        "Terminate_Playbook": {
                            "runAfter": {
                                "Step5_ProcessIndicators": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Terminate",
                            "inputs": {
                                "runStatus": "Succeeded"
                            }
                        }
                    }
                }
            }
        }
    ]
}